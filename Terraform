############################################################
# Configuration du provider AWS
############################################################
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

############################################################
# VPC + Subnets + Internet Gateway + Routage
############################################################
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

resource "aws_subnet" "subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}

resource "aws_route_table_association" "rta_1" {
  subnet_id      = aws_subnet.subnet_1.id
  route_table_id = aws_route_table.rt.id
}

resource "aws_route_table_association" "rta_2" {
  subnet_id      = aws_subnet.subnet_2.id
  route_table_id = aws_route_table.rt.id
}

############################################################
# Security Groups
############################################################
# SG pour l'accÃ¨s SSH et HTTP/HTTPS
resource "aws_security_group" "sg_web" {
  name        = "sg_web"
  description = "Security group for web + SSH"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "SSH Access"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# SG pour la base RDS SQL Server
resource "aws_security_group" "rds_sg" {
  name        = "rds_sg"
  description = "Security group for RDS"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "Allow EC2 to access RDS"
    from_port   = 1433
    to_port     = 1433
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

############################################################
# RDS SQL Server Express
############################################################
resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
}

resource "aws_db_instance" "rds_sql_server" {
  allocated_storage       = 20
  storage_type            = "gp2"
  engine                  = "sqlserver-ex"
  engine_version          = "15.00.4236.7.v1"
  instance_class          = "db.t3.micro"
  identifier             = "sqlserver-instance"
  username               = "admin"
  password               = "SuperSecurePassword123!"
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name
  vpc_security_group_ids  = [aws_security_group.rds_sg.id]
  publicly_accessible     = false
  skip_final_snapshot     = true
}

############################################################
# Key Pair
############################################################
resource "aws_key_pair" "ilyes_key" {
  key_name   = "ilyes-key"
  # Chemin vers ta clÃ© publique
  public_key = file("C:/Users/berra/.ssh/id_rsa.pub")
}

############################################################
# Instances EC2 : Test & Prod
############################################################
resource "aws_instance" "test" {
  ami                         = "ami-0c7217cdde317cfec"
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.subnet_1.id
  vpc_security_group_ids      = [aws_security_group.sg_web.id]
  key_name                    = aws_key_pair.ilyes_key.key_name

  # ðŸš€ Script de provisioning (tout se trouve dans install.sh)
  user_data = filebase64("install.sh")

  tags = {
    Name = "test-server"
  }
}

resource "aws_instance" "prod" {
  ami                         = "ami-0c7217cdde317cfec"
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.subnet_2.id
  vpc_security_group_ids      = [aws_security_group.sg_web.id]
  key_name                    = aws_key_pair.ilyes_key.key_name

  # ðŸš€ MÃªme script pour l'instance prod
  user_data = filebase64("install.sh")

  tags = {
    Name = "prod-server"
  }
}

############################################################
# IAM Role (optionnel si tu veux un accÃ¨s S3, etc.)
############################################################
resource "aws_iam_role" "ec2_role" {
  name = "ec2-ci-cd-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy_attachment" "s3_access" {
  name       = "ec2-s3-access"
  roles      = [aws_iam_role.ec2_role.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

resource "aws_iam_instance_profile" "ec2_profile" {
  name = "ec2-instance-profile"
  role = aws_iam_role.ec2_role.name
}

# ðŸš€ Exemple si tu veux attacher ce rÃ´le aux instances
# (tu peux dÃ©commenter si tu en as besoin)
# resource "aws_instance" "test_with_role" {
#   ami                    = "ami-0c7217cdde317cfec"
#   instance_type          = "t2.micro"
#   subnet_id              = aws_subnet.subnet_1.id
#   vpc_security_group_ids = [aws_security_group.sg_web.id]
#   key_name               = aws_key_pair.ilyes_key.key_name
#   iam_instance_profile   = aws_iam_instance_profile.ec2_profile.name
#   user_data              = filebase64("install.sh")
#   tags = { Name = "test-server-with-role" }
# }

############################################################
# Elastic IPs pour associer des IP fixes
############################################################
resource "aws_eip" "test_eip" {
  instance = aws_instance.test.id
  domain   = "vpc"
}

resource "aws_eip" "prod_eip" {
  instance = aws_instance.prod.id
  domain   = "vpc"
}

############################################################
# Outputs
############################################################
output "test_server_elastic_ip" {
  value = aws_eip.test_eip.public_ip
}

output "prod_server_elastic_ip" {
  value = aws_eip.prod_eip.public_ip
}

output "rds_sql_server_endpoint" {
  value = aws_db_instance.rds_sql_server.endpoint
}
